version: "3"

services:

  traefik:
    container_name: traefik
    image: traefik:v3.2.3
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./configs/traefik.yml:/etc/traefik/traefik.yml
    restart: on-failure
    networks:
      - traefik
    depends_on:
      - content-service


  content-service:
    container_name: content-service
    build:
      context: .
      dockerfile: deployments/docker/content-service.dockerfile
    labels:
      - traefik.enable=true
      - traefik.http.routers.content-service.rule=PathPrefix(`/content-service`)
      - traefik.http.services.content-service.loadbalancer.healthcheck.path=/content-service/health
      - traefik.http.services.content-service.loadbalancer.healthcheck.interval=10s
      - traefik.http.services.content-service.loadbalancer.healthcheck.timeout=3s
      - traefik.http.services.content-service.loadbalancer.server.port=${CONTENT_SERVICE_WEB_PORT}
    environment:
      PORT: ${CONTENT_SERVICE_WEB_PORT}
      GRPC_PORT: ${CONTENT_SERVICE_GRPC_PORT}
      GRACEFUL_TIMEOUT: ${SERVICES_GRACEFUL_TIMEOUT}
    expose:
      - ${CONTENT_SERVICE_WEB_PORT}
    ports:
      - ${CONTENT_SERVICE_WEB_PORT}:${CONTENT_SERVICE_WEB_PORT}
    networks:
      - traefik
      - default

  auth-service:
    container_name: auth-service
    build:
      context: .
      dockerfile: deployments/docker/auth-service.dockerfile
    labels:
      - traefik.enable=true
      - traefik.http.routers.auth-service.entrypoints=web
      - traefik.http.routers.auth-service.rule=PathPrefix(`/auth-service`)
      - traefik.http.services.auth-service.loadbalancer.healthcheck.path=/auth-service/health
      - traefik.http.services.auth-service.loadbalancer.healthcheck.interval=10s
      - traefik.http.services.auth-service.loadbalancer.healthcheck.timeout=3s
      - traefik.http.services.auth-service.loadbalancer.server.port=${AUTH_SERVICE_WEB_PORT}
    environment:
      PORT: ${AUTH_SERVICE_WEB_PORT}
      GRPC_PORT: ${AUTH_SERVICE_GRPC_PORT}
      GRACEFUL_TIMEOUT: ${SERVICES_GRACEFUL_TIMEOUT}
    expose:
      - ${AUTH_SERVICE_WEB_PORT}
    ports:
      - ${AUTH_SERVICE_WEB_PORT}:${AUTH_SERVICE_WEB_PORT}
    networks:
      - traefik
      - default

  users-service:
    container_name: users-service
    build:
      context: .
      dockerfile: deployments/docker/users-service.dockerfile
    labels:
      - traefik.enable=true
      - traefik.http.routers.users-service.entrypoints=web
      - traefik.http.routers.users-service.rule=PathPrefix(`/users-service`)
      - traefik.http.services.users-service.loadbalancer.healthcheck.path=/users-service/health
      - traefik.http.services.users-service.loadbalancer.healthcheck.interval=10s
      - traefik.http.services.users-service.loadbalancer.healthcheck.timeout=3s
      - traefik.http.services.users-service.loadbalancer.server.port=${USERS_SERVICE_WEB_PORT}
    environment:
      PORT: ${USERS_SERVICE_WEB_PORT}
      GRPC_PORT: ${USERS_SERVICE_GRPC_PORT}
      GRACEFUL_TIMEOUT: ${SERVICES_GRACEFUL_TIMEOUT}
      DATABASE_URL: postgres://${USERS_DB_USERNAME}:${USERS_DB_PASSWORD}@users_postgres:${USERS_DB_PORT}/${USERS_DB_NAME}
    expose:
      - ${USERS_SERVICE_WEB_PORT}
    ports:
      - ${USERS_SERVICE_WEB_PORT}:${USERS_SERVICE_WEB_PORT}
    networks:
      - traefik
      - default

  users_postgres:
    container_name: users_postgres
    image: postgres:17.2-alpine
    environment:
      POSTGRES_USER: ${USERS_DB_USERNAME}
      POSTGRES_PASSWORD: ${USERS_DB_PASSWORD}
      POSTGRES_DB: ${USERS_DB_NAME}
    restart: on-failure
    ports:
      - ${USERS_DB_PORT}:5432
    volumes:
      - users_db_data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready --dbname ${USERS_DB_NAME} --username ${USERS_DB_USERNAME}" ]
      interval: 1s
      timeout: 5s

  users_migrator:
    build:
      context: .
      dockerfile: deployments/docker/tern/users-tern-migrator.dockerfile
    command:
      - migrate
      - --conn-string
      - postgres://${USERS_DB_USERNAME}:${USERS_DB_PASSWORD}@users_postgres:5432/${USERS_DB_NAME}
      - --migrations
      - /migrations
    depends_on:
      users_postgres:
        condition: service_healthy

networks:
  traefik:
  default:

volumes:
  users_db_data: